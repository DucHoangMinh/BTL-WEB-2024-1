generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Log {
  id        Int      @id @default(autoincrement())
  user_id   Int
  action    String
  timestamp DateTime @default(now())
  User      User     @relation(fields: [user_id], references: [id])

  @@map("Log")
}

model Movie {
  id               Int        @id @default(autoincrement())
  title            String
  genre            String?
  duration         Int
  rating           Float?
  release_date     DateTime?
  description      String?
  relatedThumbnail String[]
  thumbnail        String?
  trailer          String?
  ranking          String?
  basic_info       String?
  Feedbacks        Feedback[]
  Showtimes        Showtime[]

  @@map("Movie")
}

model Promotion {
  id                  Int      @id @default(autoincrement())
  promotion_name      String
  description         String?
  discount_percentage Float?
  start_date          DateTime
  end_date            DateTime
  preview_image       String?
  location            String?
  thumbnail           String?
  Tickets             Ticket[]

  @@map("Promotion")
}

model Role {
  id        Int         @id @default(autoincrement())
  role_name String      @unique
  User_Role User_Role[]

  @@map("Role")
}

model Room {
  id               Int          @id @default(autoincrement())
  name             String
  capacity         Int
  movie_theater_id Int
  MovieTheater     MovieTheater @relation(fields: [movie_theater_id], references: [id])
  Seat             Seat[]
  Showtime         Showtime[]

  @@map("Room")
}

model Seat {
  id          Int       @id @default(autoincrement())
  room_id     Int
  seat_number String
  seat_type   String?
  row         String
  column      Int
  status      String    @default("available")
  showtime_id Int?
  hold_until  DateTime?
  is_paid     Boolean   @default(false)
  price       Int?
  Room        Room      @relation(fields: [room_id], references: [id])
  Showtime    Showtime? @relation(fields: [showtime_id], references: [id])
  Tickets     Ticket[]

  @@map("Seat")
}

model Showtime {
  id         Int      @id @default(autoincrement())
  movie_id   Int?
  room_id    Int?
  show_date  DateTime
  start_time DateTime
  end_time   DateTime
  Seats      Seat[]
  Movie      Movie?   @relation(fields: [movie_id], references: [id])
  Room       Room?    @relation(fields: [room_id], references: [id])
  Ticket     Ticket[]

  @@map("Showtime")
}

model Snack {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  Ticket_Snack Ticket_Snack[]

  @@map("Snack")
}

model Ticket {
  id            Int            @id @default(autoincrement())
  user_id       Int
  showtime_id   Int
  seat_id       Int
  purchase_date DateTime       @default(now())
  promotion_id  Int?
  status        String         @default("pending")
  Promotion     Promotion?     @relation(fields: [promotion_id], references: [id])
  Seat          Seat           @relation(fields: [seat_id], references: [id])
  Showtime      Showtime       @relation(fields: [showtime_id], references: [id])
  User          User           @relation(fields: [user_id], references: [id])
  Ticket_Snack  Ticket_Snack[]

  @@unique([seat_id, showtime_id])
  @@map("Ticket")
}

model Ticket_Snack {
  ticket_id Int
  snack_id  Int
  quantity  Int
  Snack     Snack  @relation(fields: [snack_id], references: [id])
  Ticket    Ticket @relation(fields: [ticket_id], references: [id])

  @@id([ticket_id, snack_id])
  @@map("Ticket_Snack")
}

model User {
  id            Int         @id @default(autoincrement())
  email         String?     @unique
  phone_number  String?     @unique
  password      String
  full_name     String
  date_of_birth DateTime?
  created_at    DateTime    @default(now())
  role          String?
  Feedback      Feedback[]
  Log           Log[]
  Ticket        Ticket[]
  User_Role     User_Role[]

  @@map("User")
}

model User_Role {
  user_id Int
  role_id Int
  Role    Role @relation(fields: [role_id], references: [id])
  User    User @relation(fields: [user_id], references: [id])

  @@id([user_id, role_id])
  @@map("User_Role")
}

model Feedback {
  id         Int      @id @default(autoincrement())
  user_id    Int
  movie_id   Int
  rating     Int
  comment    String?
  created_at DateTime @default(now())
  Movie      Movie    @relation(fields: [movie_id], references: [id])
  User       User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, movie_id])
  @@map("Feedback")
}

model MovieTheater {
  id              Int     @id @default(autoincrement())
  name            String
  location        String
  total_rooms     Int
  capacity        Int
  has_3d          Boolean @default(false)
  has_imax        Boolean @default(false)
  has_dolby_atmos Boolean @default(false)
  contact_email   String?
  contact_phone   String?
  website_url     String?
  city            String
  Rooms           Room[]

  @@map("MovieTheater")
}

model Transaction {
  id          Int       @id @default(autoincrement())
  amount      Float    
  description String   
  created_at  DateTime @default(now()) 

  @@map("Transaction")
}
