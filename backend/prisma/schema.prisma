datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

generator client {
  provider = "prisma-client-js"
}

// Model Log
model Log {
  id        Int      @id @default(autoincrement())
  user_id   Int
  action    String
  timestamp DateTime @default(now())
  User      User     @relation(fields: [user_id], references: [id])

  @@map("Log")
}

// Model Movie
model Movie {
  id              Int       @id @default(autoincrement())
  title           String
  genre           String?
  duration        Int
  rating          Float?
  release_date    DateTime?
  description     String?
  Showtimes       Showtime[]
  thumbnail       String?
  relatedThumbnail String[]
  Feedbacks       Feedback[]
  trailer         String?
  ranking         String?         //Xếp hạng (khác với rating)
  basic_info      String?         //Thông tin cơ bản
  @@map("Movie")  
}

// Model Promotion
model Promotion {
  id                  Int      @id @default(autoincrement())
  promotion_name      String
  description         String?
  discount_percentage Float?
  start_date          DateTime
  end_date            DateTime
  preview_image       String?
  thumbnail           String?
  Tickets             Ticket[]  
  location            String?
  @@map("Promotion")
}

// Model Role
model Role {
  id        Int    @id @default(autoincrement())
  role_name String @unique

  User_Role User_Role[]

  @@map("Role")
}

// Model Room
model Room {
  id                Int          @id @default(autoincrement())
  name              String
  capacity          Int
  movie_theater_id  Int // Foreign key for MovieTheater
  MovieTheater      MovieTheater @relation(fields: [movie_theater_id], references: [id])

  Seat              Seat[]
  Showtime          Showtime[]
  @@map("Room")
}

// Model Seat
model Seat {
  id                Int      @id @default(autoincrement())
  room_id           Int
  showtime_id       Int?
  seat_number       String   // Định dạng ghế như A1, A2, B1, B2, ...
  seat_type         String?  // (VIP, thường, ...)
  row               String   // Hàng ghế ( A, B, C, ...)
  column            Int      // Số ghế trong hàng (ví dụ: 1, 2, 3, ...)
  status            String   @default("available")
  hold_until        DateTime? 
  is_paid           Boolean  @default(false) 

  Room              Room     @relation(fields: [room_id], references: [id])
  Showtime          Showtime? @relation(fields: [showtime_id], references: [id]) // Liên kết với suất chiếu
  Tickets           Ticket[] // Thêm trường này để tạo quan hệ đối ứng với Ticket

  @@unique([seat_number, showtime_id]) // Đảm bảo một ghế chỉ có trạng thái duy nhất cho một suất chiếu
  @@map("Seat")
}

// Model Showtime
model Showtime {
  id         Int      @id @default(autoincrement())
  movie_id   Int
  room_id    Int
  show_date  DateTime
  start_time DateTime
  end_time   DateTime
  price      Float

  Movie  Movie    @relation(fields: [movie_id], references: [id])
  Room   Room     @relation(fields: [room_id], references: [id])
  Ticket Ticket[]
  Seats  Seat[]
  @@map("Showtime")
}

// Model Snack
model Snack {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Float

  Ticket_Snack Ticket_Snack[]

  @@map("Snack")
}

// Model Ticket
model Ticket {
  id            Int            @id @default(autoincrement())
  user_id       Int
  showtime_id   Int
  seat_id       Int
  purchase_date DateTime       @default(now())
  promotion_id  Int? // Quan hệ tùy chọn
  User          User           @relation(fields: [user_id], references: [id])
  Showtime      Showtime       @relation(fields: [showtime_id], references: [id])
  Seat          Seat           @relation(fields: [seat_id], references: [id])
  Promotion     Promotion?     @relation(fields: [promotion_id], references: [id]) // Quan hệ tùy chọn
  Ticket_Snack  Ticket_Snack[]
  status        String @default("pending") // pending, paid, used

  @@unique([seat_id, showtime_id])
  @@map("Ticket")
}

// Model Ticket_Snack
model Ticket_Snack {
  ticket_id Int
  snack_id  Int
  quantity  Int

  Ticket Ticket @relation(fields: [ticket_id], references: [id])
  Snack  Snack  @relation(fields: [snack_id], references: [id])

  @@id([ticket_id, snack_id])
  @@map("Ticket_Snack")
}

// Model User
model User {
  id            Int       @id @default(autoincrement())
  email         String?   @unique
  phone_number  String?   @unique
  password      String
  full_name     String
  date_of_birth DateTime?
  created_at    DateTime  @default(now())

  Log       Log[]
  Ticket    Ticket[]
  User_Role User_Role[]
  Feedback  Feedback[] // Add this to connect to Feedback model

  @@map("User")
}

// Model User_Role
model User_Role {
  user_id Int
  role_id Int

  User User @relation(fields: [user_id], references: [id])
  Role Role @relation(fields: [role_id], references: [id])

  @@id([user_id, role_id])
  @@map("User_Role")
}

model Feedback {
  id         Int      @id @default(autoincrement())
  user_id    Int
  movie_id   Int
  rating     Int // Scale 1-5
  comment    String?
  created_at DateTime @default(now())
  @@unique([user_id, movie_id])       // Đảm bảo mỗi người dùng chỉ đánh giá một phim một lần
  User  User  @relation(fields: [user_id], references: [id])
  Movie Movie @relation(fields: [movie_id], references: [id])

  @@map("Feedback")
}

model MovieTheater {
  id              Int     @id @default(autoincrement())
  name            String 
  location        String 
  city            String
  total_rooms     Int 
  capacity        Int 
  has_3d          Boolean @default(false) 
  has_imax        Boolean @default(false) 
  has_dolby_atmos Boolean @default(false) 
  contact_email   String? 
  contact_phone   String? 
  website_url     String? 
  Rooms Room[] // Relation to the Room model

  @@map("MovieTheater")
}
